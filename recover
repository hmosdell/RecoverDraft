#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

typedef uint8_t BYTE;

int main(int argc, char *argv[])
{
    FILE *oPointer = NULL;
    char *input = argv[1];

    // Check command line arguments
    if (argc != 2)
    {
        printf("Usage: ./recover FILE\n");
        return 1;
    }

    // Check that the file pointer is not null, print error if it is
    FILE *iPointer = fopen(input, "r");
    if (iPointer == NULL)
    {
        printf("Could not open file.\n");
        return 1;
    }

    // Define elements to be used in the loop
    BYTE buffer[512];
    int jpeg_count = 0;
    char name[8];
    while (fread(buffer, sizeof(buffer), 1, iPointer) == 1)
    {
        // Check for jpeg header
        if ((buffer[0] == 0xff && buffer[1] == 0xd8 && buffer[2] == 0xff && (buffer[3] & 0xf0) == 0xe0))
        {
            jpeg_count++;
            sprintf(name, "%03i.jpg", (jpeg_count - 1));
            oPointer = fopen(name, "w");
                if (oPointer == NULL)
                {
                    printf("Could not open file.\n");
                    return 1;
                }

            // If first jpeg, open and write to a file
            if (jpeg_count == 1)
            {
                fwrite(buffer, sizeof(buffer), 1, oPointer);
            }

            // If not first jpeg, close previous jpeg, open and write to another
            else if (jpeg_count > 1)
            {
                fclose(oPointer);
                oPointer = fopen(name, "w");
                if (oPointer == NULL)
                {
                    printf("Could not open file.\n");
                    return 1;
                }
            }
        }
        // If not a jpeg header, keep writing data to the file because it belongs to previously identified jpeg
        else
        {
            fwrite(buffer, sizeof(buffer), 1, oPointer);
        }
    }
    // Close all open files
    fclose(oPointer);
    fclose(iPointer);

    return 0;
}

